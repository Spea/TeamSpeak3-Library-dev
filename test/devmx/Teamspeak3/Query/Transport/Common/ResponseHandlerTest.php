<?php

namespace devmx\Teamspeak3\Query\Transport\Common;

require_once dirname( __FILE__ ) . '/../../../../../../devmx/Teamspeak3/Query/Transport/Common/ResponseHandler.php';

/**
 * Test class for ResponseHandler.
 * Generated by PHPUnit on 2012-01-21 at 16:39:03.
 */
class ResponseHandlerTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var \devmx\Teamspeak3\Query\Transport\Common\ResponseHandler
     */
    protected $handler;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->handler = new ResponseHandler();

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }
    
    public function testExtraErrorMessages() {
        $cmd = new \devmx\Teamspeak3\Query\Command('foo');
        $raw = "foo=bar\nerror id=32 msg=failed extra_message=what\\sthe\\shell failed_permid=123";
        $response = $this->handler->getResponseInstance($cmd , $raw);
        $response = $response['response'];
        $this->assertEquals(32, $response->getErrorID());
        $this->assertEquals('failed', $response->getErrorMessage());
        $this->assertEquals('what the hell', $response->getErrorValue('extra_message'));
        $this->assertEquals(123, $response->getErrorValue('failed_permid'));
    }

    /**
     * @dataProvider unescapeProvider
     */
    public function testUnescape($escaped, $unescaped)
    {
        $this->assertEquals($unescaped, $this->handler->unescape($escaped));
    }
    
    public function unescapeProvider() {
        return array(
            array('this\sis\s\nsimple\nisnt it?', "this is \nsimple\nisnt it?"),
            array('\s\s\s\s', "    "),
            array('\s\n\s\s\n\t', " \n  \n\t"),
            array('\p\s\n\t', "| \n\t")
        );
    }

    /**
     * tests if responses with just error message in it are parsed correctly
     */
    public function testGetResponseInstance_ErrorOnly()
    {
        $cmd = new \devmx\Teamspeak3\Query\Command('foo');
        $raw = "error id=0 msg=ok";
        $parsed = $this->handler->getResponseInstance($cmd , $raw);
        $this->assertTrue(isset($parsed['response']));
        $resp = $parsed['response'];
        $this->assertEquals(0, $resp->getErrorID());
        $this->assertEquals('ok', $resp->getErrorMessage());
        $this->assertEquals(array(), $resp->getItems());
        $this->assertEquals($cmd, $resp->getCommand());
        
        $cmd = new \devmx\Teamspeak3\Query\Command('foo');
        $raw = "error id=12 msg=failed\\shard";
        $parsed = $this->handler->getResponseInstance($cmd , $raw);
        $this->assertTrue(isset($parsed['response']));
        $resp = $parsed['response'];
        $this->assertEquals(12, $resp->getErrorID());
        $this->assertEquals('failed hard', $resp->getErrorMessage());
        $this->assertEquals(array(), $resp->getItems());
    }
    
    /**
     * @dataProvider itemProvider 
     */
    public function testGetResponseInstance_WithItems($raw, $expected) {
        $cmd = new \devmx\Teamspeak3\Query\Command('foo');
        $parsed = $this->handler->getResponseInstance($cmd , $raw);
        $parsed = $parsed['response'];
        $this->assertEquals($expected, $parsed->getItems());
    }
    
    
    public function itemProvider() {
        $raw1 = <<<'EOF'
foo=bar bar=foo asdf=jklö
error id=0 msg=ok
EOF;
        $raw2 = <<<'EOF'
foo=bar bar=foo asdf=jklö|foo=bar2 bar=foo asdf=jklö2
error id=0 msg=ok
EOF;
        $raw3 = <<<'EOF'
foo=bar\sf bar=foo\n\t asdf=jklö|foo=bar2 bar=foo\ps asdf=jklö2
error id=0 msg=ok
EOF;
        return array(
          array($raw1, array(array("foo"=>"bar", "bar"=>"foo", "asdf"=>"jklö"))),
          array($raw2, array(array("foo"=>"bar", "bar"=>"foo", "asdf"=>"jklö"), array("foo"=>"bar2", "bar"=>"foo", "asdf"=>"jklö2"))),
          array($raw3, array(array("foo"=>"bar f", "bar"=>"foo\n\t", "asdf"=>"jklö"), array("foo"=>"bar2", "bar"=>"foo|s", "asdf"=>"jklö2"))),
        );
    }
    
    
    public function testGetResponseInstance_WithEvents() {
        $cmd = new \devmx\Teamspeak3\Query\Command('foo');
        $raw = <<<'EOF'
notifycliententerview cfid=12 ctid=23
client=foo asdf=bar
error id=0 msg=ok
EOF;
        $parsed = $this->handler->getResponseInstance($cmd , $raw);
        $this->assertEquals(1, count($parsed['events']));
        $event = $parsed['events'][0];
        $this->assertEquals(array("cfid"=>12, "ctid"=>23), $event->getItems());
    }
    

   
    public function testIsCompleteResponse()
    {
        $this->assertTrue($this->handler->isCompleteResponse('This\sis\sa\sresponse'."\n".'error id=0 msg=ok'."\n"));
        $this->assertFalse($this->handler->isCompleteResponse('This\sis\sa\sresponse'."\n".'error\sid=0\smsg=ok'."\n"));
    }

    /**
     * @todo Implement testGetEventInstances().
     */
    public function testGetEventInstances()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );

    }

    

    public function testIsWelcomeMessage()
    {
        $message = <<<'EOF'
TS3
Welcome to the TeamSpeak 3 ServerQuery interface, type "help" for a list of commands and "help <command>" for information on a specific command.
EOF;
        $message .= "\r\n";
        $this->assertTrue($this->handler->isWelcomeMessage($message));
        $this->assertFalse($this->handler->isWelcomeMessage("TS3\n"));
    }

}

?>
