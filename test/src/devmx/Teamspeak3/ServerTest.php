<?php

namespace devmx\Teamspeak3;

require_once dirname( __FILE__ ) . '/../../../../src/devmx/Teamspeak3/Server.php';

/**
 * Test class for Server.
 * Generated by PHPUnit on 2012-02-24 at 14:51:04.
 */
class ServerTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var \devmx\Teamspeak3\Server
     */
    protected $server;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->server = new Server;

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers devmx\Teamspeak3\Server::setValue
     * @covers devmx\Teamspeak3\Server::getValue
     */
    public function testSetGetValue()
    {
        $this->server->setValue('foo', 'bar');
        $this->assertEquals('bar', $this->server->getValue('foo'));
    }

    /**
     * @covers devmx\Teamspeak3\Server::offsetExists
     */
    public function testOffsetExists()
    {
        $this->server->setValue('foo','bar');
        $this->assertTrue(isset($this->server['foo']));
    }

    /**
     * @covers devmx\Teamspeak3\Server::offsetGet
     * @todo Implement testOffsetGet().
     */
    public function testOffsetGet()
    {
        $this->server->setValue('foo', 'bar');
        $this->assertEquals('bar', $this->server['foo']);
    }

    /**
     * @covers devmx\Teamspeak3\Server::offsetSet
     * @todo Implement testOffsetSet().
     */
    public function testOffsetSet()
    {
        $this->server['foo'] = 'bar';
        $this->assertEquals('bar', $this->server['foo']);
    }

    /**
     * @covers devmx\Teamspeak3\Server::getData
     */
    public function testGetData()
    {
        $this->server['foo'] = 'bar';
        $this->assertEquals(array('foo' => 'bar'), $this->server->getData());
    }

    /**
     * @covers devmx\Teamspeak3\Server::createVirtualServer
     */
    public function testCreateVirtualServerByID()
    {
        $vserver = $this->server->createVirtualServer(array('virtualserver_id' => 12));
        $this->assertEquals(12, $vserver->getID());
    }
    
    /**
     * @covers devmx\Teamspeak3\Server::createVirtualServer
     */
    public function testCreateVirtualServerByObject() {
        $vserver = $this->server->createVirtualServer(new VirtualServer(12));
        $this->assertEquals(12, $vserver->getID());
    }
    
    /**
     * @covers devmx\Teamspeak3\Server::deleteVirtualServer
     */
    public function testDeleteVirtualServerByID() {
        $vserver = $this->server->createVirtualServer(new VirtualServer(12));
        $this->server->deleteVirtualServer(12);
        $this->assertNull($this->server->getVirtualServerByID(12));
    }

    /**
     * @covers devmx\Teamspeak3\Server::deleteVirtualServer
     */
    public function testDeleteVirtualServerByObject()
    {
        $vserver = $this->server->createVirtualServer(new VirtualServer(12));
        $this->server->deleteVirtualServer($vserver);
        $this->assertNull($this->server->getVirtualServerByID(12));
    }

    /**
     * @covers devmx\Teamspeak3\Server::getVirtualServerByPort
     * @todo Implement testGetVirtualServerByPort().
     */
    public function testGetVirtualServerByPort()
    {
        $vserver = $this->server->createVirtualServer(new VirtualServer(12));
        $vserver->setPort(9987);
        $this->assertEquals($vserver, $this->server->getVirtualServerByPort(9987));
    }

    /**
     * @covers devmx\Teamspeak3\Server::getVirtualServerByID
     */
    public function testGetVirtualServerByID()
    {
       $vserver = $this->server->createVirtualServer(new VirtualServer(12));
       $this->assertEquals($vserver, $this->server->getVirtualServerByID(12));
    }

    /**
     * @covers devmx\Teamspeak3\Server::stop
     */
    public function testStop()
    {
        $this->server->stop();
        $this->assertTrue($this->server->isStopped());
    }

    /**
     * @covers devmx\Teamspeak3\Server::getVirtualServers
     */
    public function testGetVirtualServers()
    {
        $vserver = $this->server->createVirtualServer(new VirtualServer(12));
        $vserver->setName('foobar');
        $vserver2 = $this->server->createVirtualServer(new VirtualServer(13));
        $vserver2->setName('foo');
        $vserver3 = $this->server->createVirtualServer(new VirtualServer(14));
        $vserver3->setName('barfoo');
        $this->assertEquals(array($vserver, $vserver2), $this->server->getVirtualServers(function($server) {
            //this function checks if the servername starts with foo
            return substr($server->getName(), 0, 3) === 'foo';
        }));
    }

    /**
     * @covers devmx\Teamspeak3\Server::findVirtualServer
     */
    public function testFindVirtualServer()
    {
        $vserver = $this->server->createVirtualServer(new VirtualServer(12));
        $vserver->setName('foobar');
        $vserver2 = $this->server->createVirtualServer(new VirtualServer(13));
        $vserver2->setName('foo');
        $vserver3 = $this->server->createVirtualServer(new VirtualServer(14));
        $vserver3->setName('barfoo');
        $this->assertEquals($vserver, $this->server->findVirtualServer(function($server) {
            //this function checks if the servername starts with foo
            return substr($server->getName(), 0, 3) === 'foo';
        }));

    }
}

?>
